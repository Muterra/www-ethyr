<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>ethyr</title><link href="/blog/" rel="alternate"></link><link href="/blog/feeds/all.atom.xml" rel="self"></link><id>/blog/</id><updated>2015-10-07T17:47:00-07:00</updated><entry><title>Muse overview</title><link href="/blog/muse-101.html" rel="alternate"></link><updated>2015-10-07T17:47:00-07:00</updated><author><name>Nick Badger</name></author><id>tag:,2015-10-07:blog/muse-101.html</id><summary type="html">&lt;p&gt;Though this blog is primarily focused on Ethyr, the Muse protocol is the technical meat and bones of this project. It is Ethyr's primary innovation and Muterra's core technology. As such, this blog is also a convenient place to talk about the protocol itself. What follows is a brief exploration thereof.&lt;/p&gt;
&lt;h2&gt;Muse&lt;/h2&gt;
&lt;p&gt;The abstract intent of the Muse protocol is deceptively simple. Imagine you've created some digital work: a quick text explanation of a project you're working on, for example. Now you'd like to share it with someone. Muse is designed to handle the sharing step as directly as possible, without requiring websites as middlemen - all while still ensuring that only your intended recipient(s) have access to the data. The goal is to make the actual process of sharing something as simple and exact as it seems it should be.&lt;/p&gt;
&lt;p&gt;It's worth noting that this bears a large resemblance to email in the early 2000's, when it was already quite popular, but most people only had a single address. If you wanted to share something with someone digitally, you sent them an email. It was easy and effective. But email (at least as we usually see it) is severely limited: it's &lt;a href="https://en.wikipedia.org/wiki/Email#Privacy_concerns"&gt;wholly insecure&lt;/a&gt;, incompatible with &lt;a href="https://en.wikipedia.org/wiki/Many-to-many"&gt;publication&lt;/a&gt;, slow, and awkward for everything except text. In contrast, Muse behaves like a modernized version of &lt;a href="https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol"&gt;SMTP&lt;/a&gt;: it's encrypted, supports publicly-viewable data, is real-time capable, and works for any and all digital information.&lt;/p&gt;
&lt;p&gt;In other words, imagine a new version of email designed specifically for encrypted social networking. That means one-to-any support at a protocol level: you can "address" the "message" to any number of people, even the general public, or nobody. Muse accomplishes this by separating message delivery into the discrete concerns of &lt;a href="https://en.wikipedia.org/wiki/Persistent_memory"&gt;persistence&lt;/a&gt; and sharing. The message itself is encrypted at all times, and it can be "delivered" without a trusted server, because access sharing takes place directly between network participants. Note that, as participants may not have a 1-to-1 relationship with devices, this is a subtly different consideration than traditional &lt;a href="https://en.wikipedia.org/wiki/End-to-end_encryption"&gt;end-to-end encryption&lt;/a&gt;. And unlike email, Muse is not strictly an internet protocol: it is designed to work with any data connection between network peers. Muse is therefore not only capable of fluid transition to alternative network infrastructure (for example, a &lt;a href="http://www.bluetooth.com/Pages/Press-Releases-Detail.aspx?ItemID=224"&gt;Bluetooth mesh network&lt;/a&gt;), but also fully compatible with existing technologies like Websockets or WebRTC. And also unlike email, with its clumsy binary -&amp;gt; text -&amp;gt; ascii-armor transition for binary attachments, Muse is a natively binary protocol.&lt;/p&gt;
&lt;h2&gt;Protocol goals&lt;/h2&gt;
&lt;p&gt;Before discussing protocol technical requirements, I'd like to stress a few key points. Muse is a &lt;strong&gt;protocol&lt;/strong&gt;: not a platform, not a product. To use it, someone needs to write a protocol implementation. Though Muse is an openly-published protocol, implementations may be closed source. Furthermore, though the Muse &lt;em&gt;protocol&lt;/em&gt; is not married to any one data transport technology, Muse &lt;em&gt;implementations&lt;/em&gt; likely will be. Part of the hope here is to free social applications from data transport concerns and make them wholly network agnostic (and vice versa); this approach requires the implementations themselves to exclusively handle physical data delivery, and the applications to only handle information use. &lt;/p&gt;
&lt;p&gt;This greatly simplifies network innovation and enables application-independent, seamless transition between &lt;a href="https://en.wikipedia.org/wiki/Internet_protocol_suite"&gt;various&lt;/a&gt; &lt;a href="https://en.wikipedia.org/wiki/Tor_%28anonymity_network%29"&gt;different&lt;/a&gt; &lt;a href="https://en.wikipedia.org/wiki/Private_network"&gt;networking&lt;/a&gt; &lt;a href="https://en.wikipedia.org/wiki/MaidSafe"&gt;technologies&lt;/a&gt;. However, it also begets an important caveat: Muse's security is always beholden to the underlying transport layer. It is up to that transport layer and its Muse implementation to address network-level security risks, such as traffic analysis or hard IP address anonymity.&lt;/p&gt;
&lt;p&gt;At the other end of the Muse abstraction, the protocol also has limits. Though it stresses granting network &lt;a href="https://en.wikipedia.org/wiki/Agency_%28philosophy%29"&gt;agency&lt;/a&gt; to abstract digital "identities" instead of concrete physical devices, Muse does not concern itself with the specifics of those identities. They are the &lt;a href="https://en.wikipedia.org/wiki/Key_exchange"&gt;absolute minimum that is technically required by the protocol&lt;/a&gt;, and do not offer any inherent assertion or identity ownership. Such verification requirements are always application-specific, so the Muse protocol deliberately avoids them. All Muse-based applications may make use of any Muse identity, regardless of (or contingent upon) any identity verification. Storage container formats (even for Muse primitives like identity &lt;a href="https://en.wikipedia.org/wiki/Public-key_cryptography"&gt;public keys&lt;/a&gt;) are similarly out-of-scope; standardizing core implementation functionality will be independently approached with Muse overlay standards proposals.&lt;/p&gt;
&lt;p&gt;That being said, any application making use of any Muse implementation can expect:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Private, encrypted information transfer directly between explicitly-addressed parties with no trusted third party, over&lt;/li&gt;
&lt;li&gt;An &lt;a href="https://en.wikipedia.org/wiki/Asynchronous_communication#Electronically_mediated_communication"&gt;asynchronously&lt;/a&gt;-available &lt;a href="https://en.wikipedia.org/wiki/Persistent_memory"&gt;persistence system&lt;/a&gt; with indefinite storage capability, using&lt;/li&gt;
&lt;li&gt;Identity-based communication addressing (and therefore implying full device and network independence), with&lt;/li&gt;
&lt;li&gt;Implementation-specific delivery speeds, up to and including real-time, and&lt;/li&gt;
&lt;li&gt;Implementation-specific traffic capacity.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Up next: the vision behind Ethyr.&lt;/strong&gt;&lt;/p&gt;</summary><category term="Muse"></category><category term="Technical"></category><category term="Implementation"></category></entry><entry><title>Status report Q3 2015</title><link href="/blog/status-2015-q3.html" rel="alternate"></link><updated>2015-10-05T14:46:00-07:00</updated><author><name>Nick Badger</name></author><id>tag:,2015-10-05:blog/status-2015-q3.html</id><summary type="html">&lt;p&gt;As explained in the &lt;a href="/blog/landscape-101.html"&gt;project introduction page&lt;/a&gt;, Ethyr has three major aspects: its protocol (Muse), its application (Ethyr itself), and its supporting company (Muterra). This section is a brief overview of their respective statuses as of the beginning of October 2015.&lt;/p&gt;
&lt;h1&gt;Muterra&lt;/h1&gt;
&lt;p&gt;Muterra, Inc is registered as a Delaware C Corporation, headquartered in Oakland, CA. It is currently a one-man shop (that's me, Nick Badger), though I have spoken with a friend about him possibly coming on board. That discussion is fairly early on and pending a bunch of (primarily financial) milestones on my end. &lt;/p&gt;
&lt;p&gt;On 4 September I left my previous position to focus on this project full-time. The timing was right for a variety of reasons, but everything was very much in its infancy. Muterra.io had a (very amateurish) landing webpage, and though I would guess I had compiled between 100 and 200 pages of notes by this point, I had very little to show for it.&lt;/p&gt;
&lt;p&gt;The decision to quit and work full-time on this project was admittedly an intimidating one, because I had/have effectively zero financial safety net (short of imploding my entire life and moving back in with my parents, which I do not consider an option). For reference, here are a bunch of financial details:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Personal burn rate ~$3000/month&lt;ul&gt;
&lt;li&gt;$1200/mo rent&lt;/li&gt;
&lt;li&gt;$550/mo student loans&lt;/li&gt;
&lt;li&gt;$200/mo phone, utilities, etc&lt;/li&gt;
&lt;li&gt;$350/mo groceries (I average 3k-4k calories per day; it gets expensive)&lt;/li&gt;
&lt;li&gt;$75/mo transit&lt;/li&gt;
&lt;li&gt;$150/mo home consumables (sponges, cleaning stuff, TP, etc)&lt;/li&gt;
&lt;li&gt;~$475 left for everything else&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;~$7500 in savings after cashing final paycheck and after August bills&lt;/li&gt;
&lt;li&gt;~$5500 in reserve investments (goodbye, retirement account) post fees&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, with that said, with absolute zero receipts the financial timeline looks like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;4 Sept: Last day of steady paycheck. $7500&lt;/li&gt;
&lt;li&gt;~7 Oct: clear first bills cycle. $5200 (did better than expected!)&lt;/li&gt;
&lt;li&gt;~7 Nov: clear second bills cycle. $2200 est.&lt;/li&gt;
&lt;li&gt;~10 Nov: reserve pull #1. $4700 est.&lt;/li&gt;
&lt;li&gt;~7 Dec: clear third bills cycle. $1700 est.&lt;/li&gt;
&lt;li&gt;~10 Dec: reserve pull #2. $3700 est.&lt;/li&gt;
&lt;li&gt;~15 Dec: drop-dead financial date. Start looking for a job.&lt;/li&gt;
&lt;li&gt;~7 Jan: clear fourth bills cycle. $700 est.&lt;/li&gt;
&lt;li&gt;~ 31 Jan: start burning credit, or life starts financial implosion.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The company side of things is much simpler to account for.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Corporate burn rate &amp;lt;$50/month&lt;/li&gt;
&lt;li&gt;$350 in the bank&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the past month the financial situation has remained unchanged. For the company, the three primary developments have been:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Update &lt;a href="https://www.muterra.io"&gt;webpage&lt;/a&gt; to not be quite so amateurish, and create an independent site for Ethyr.&lt;/li&gt;
&lt;li&gt;Start talking about their existence.&lt;/li&gt;
&lt;li&gt;Square away some internal details (streamline records, clean up server pipeline, etc).&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Muse&lt;/h1&gt;
&lt;p&gt;As of 4 September 2015, the Muse protocol was at a serviceable draft level of completion: far enough along that I was comfortable writing prototype implementation software, but still nowhere near version 1.0. I had already written some preliminary experimental code of previous protocol versions, and they showed promise. &lt;/p&gt;
&lt;p&gt;Very little has changed with the protocol in the month since then. It is still &lt;a href="https://github.com/Muterra/doc-muse/tree/4402f99d3b9a5c3ab404875c16a33b0ce9e546ab"&gt;severely under-documented&lt;/a&gt;, though expanding and updating existing documentation, leading up to a security review, is the next step.&lt;/p&gt;
&lt;p&gt;At a very high level, the protocol is currently intended to convert a&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;data transport network&lt;/li&gt;
&lt;li&gt;capable of insecure binary message transmission&lt;/li&gt;
&lt;li&gt;between individual physical (or virtual) network nodes&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;into a &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;secure &lt;a href="https://en.wikipedia.org/wiki/Overlay_network"&gt;overlay network&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;capable of authenticated, confidential, verifiably intact binary message transmission&lt;/li&gt;
&lt;li&gt;between abstract network &lt;em&gt;participants&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The protocol operates at a fairly low level and defines a series of "encrypted information container" (EIC) file/message formats that support:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"Private by default" information&lt;/li&gt;
&lt;li&gt;One-to-any communications&lt;/li&gt;
&lt;li&gt;Asynchronous data persistence&lt;/li&gt;
&lt;li&gt;Digital identity management&lt;/li&gt;
&lt;li&gt;Information sharing management&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additionally, there are two work-in-progress Muse Overlay Standards proposals that outline:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A common public identity storage format&lt;/li&gt;
&lt;li&gt;A common private identity key storage format&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And two associated file formats:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;zbg, an unencrypted binary structured object serialization format&lt;/li&gt;
&lt;li&gt;harch, an unencrypted binary hyper-archive format&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are all, of course, subject to limitations and assumptions that will be outlined in future documents.&lt;/p&gt;
&lt;h1&gt;Ethyr&lt;/h1&gt;
&lt;p&gt;As of 4 September, Ethyr was only an idea and a bare domain. For all intents and purposes, it did not exist. Though it still isn't much closer to existing, that idea is starting to see the light of day, and I've made good progress (though it's felt too slow). The three highlights are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I have a much better sense of what I'd like to see for an alpha release&lt;/li&gt;
&lt;li&gt;Ethyr has a landing page and email list&lt;/li&gt;
&lt;li&gt;Ethyr now has a blog&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That doesn't sound like much, and in the grand scheme of things, it isn't. However, since I'm as short-staffed as I am, those last two points in particular entailed a whole lot of work:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Get AWS hosting infrastructure up&lt;ul&gt;
&lt;li&gt;Shared with Muterra.io&lt;/li&gt;
&lt;li&gt;It takes me only 5-10 minutes to update and deploy new static servers&lt;/li&gt;
&lt;li&gt;Auto-scaling server infrastructure to demand&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Catch up to the past &lt;strong&gt;10 years&lt;/strong&gt; of web development&lt;ul&gt;
&lt;li&gt;Re-familiarize with HTML&lt;/li&gt;
&lt;li&gt;Re-familiarize with CSS&lt;/li&gt;
&lt;li&gt;Re-familiarize with JS, including "huh, jquery looks neat"&lt;/li&gt;
&lt;li&gt;Learn how to do anything responsive&lt;/li&gt;
&lt;li&gt;Get comfortable with static site generation (using &lt;a href="http://docs.getpelican.com/en/3.6.3/index.html"&gt;Pelican&lt;/a&gt;, in my case)&lt;/li&gt;
&lt;li&gt;Get frustrated by existing blog template design&lt;/li&gt;
&lt;li&gt;Spend too long rolling your own&lt;/li&gt;
&lt;li&gt;Make a bunch of mistakes and learn from them&lt;/li&gt;
&lt;li&gt;Start boxing with the CSS box model&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Get a better artistic feel for web design&lt;ul&gt;
&lt;li&gt;Make a lot of mistakes and learn from them&lt;/li&gt;
&lt;li&gt;Do a lot of "comparison shopping"&lt;/li&gt;
&lt;li&gt;Small amount of asset creation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Actually announce Ethyr and then fight the few resulting fires on the landing page&lt;/li&gt;
&lt;li&gt;Integrate with external tools like Mailchimp&lt;/li&gt;
&lt;li&gt;Etc&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'm happy to report that the learning curves have mostly subsided, and I can quite easily add new posts to a blog that I don't totally hate. There's definitely room for improvement, but given my limited supply of man-hours, I've shifted my priorities elsewhere.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Up next: an &lt;a href="/blog/muse-101.html"&gt;introduction to the Muse protocol&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;</summary><category term="Ethyr"></category><category term="Muterra"></category><category term="Muse"></category></entry><entry><title>Ethyr, Muse, and Muterra</title><link href="/blog/landscape-101.html" rel="alternate"></link><updated>2015-10-01T17:31:00-07:00</updated><author><name>Nick Badger</name></author><id>tag:,2015-10-01:blog/landscape-101.html</id><summary type="html">&lt;p&gt;I semi-officially announced this project about two weeks ago. As the bare-bones landing page up on the &lt;a href="https://www.ethyr.net"&gt;homepage&lt;/a&gt; is (intentionally) lacking any real substance, I've since had a number of friends ask for more details on the project. This post is an overview of what's what, to preemptively clarity future in-depth posts. &lt;strong&gt;Long story short: Ethyr is a new social network; it's being built on the &lt;a href="https://github.com/Muterra/doc-muse"&gt;Muse protocol&lt;/a&gt;; it's owned by &lt;a href="https://www.muterra.io"&gt;Muterra, Inc&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Ethyr, Muse, and Muterra&lt;/h2&gt;
&lt;p&gt;Possibly the most important confusion I've heard is one of names. We're increasingly acclimated to single-product tech companies: Dropbox &lt;em&gt;the company&lt;/em&gt; is known primarily for Dropbox &lt;em&gt;the service&lt;/em&gt;; Twitter &lt;em&gt;the company&lt;/em&gt; is known primarily for Twitter &lt;em&gt;the site&lt;/em&gt;, etc. Furthermore, these monolithic applications, generally speaking, operate from fairly basic building blocks like &lt;a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol"&gt;HTTP&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/XMPP"&gt;XMPP&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol"&gt;SMTP&lt;/a&gt;, etc; other than exposing a product-specific &lt;a href="https://en.wikipedia.org/wiki/Application_programming_interface"&gt;API&lt;/a&gt;, it's rare for companies to develop new protocols for use in their frontline products.&lt;/p&gt;
&lt;p&gt;There are a lot of reasons why this happens, but there is a trend in larger, more mature tech companies (ex: Facebook, Google, Microsoft) towards product diversification. The recent Google restructuring into &lt;a href="https://abc.xyz"&gt;Alphabet&lt;/a&gt; is a costly example of this strategy being retroactively applied to the company as a whole. This kind of rebranding is something I would prefer heavily to avoid. Simultaneously, the single product / single company paradigm doesn't quite sit right with me: it feels both too limiting (we're only planning on building this one thing) and too self-important (we name everything we do after ourselves). Meanwhile the approach of a single company producing multiple products has long been the traditional norm for physical goods. So, I think my predilections are clear, and without further ado...&lt;/p&gt;
&lt;h2&gt;Muse&lt;/h2&gt;
&lt;p&gt;The Muse protocol is an open, secure approach for private-by-default social interaction. Put succinctly, it is designed to make sure everyone has control over who they are, what they say, and who they say it to.&lt;/p&gt;
&lt;p&gt;It is capable of decentralized operation but does not require it. It a &lt;a href="https://en.wikipedia.org/wiki/High-_and_low-level"&gt;mid-level&lt;/a&gt; protocol, sandwiched between &lt;a href="https://en.wikipedia.org/wiki/Transport_layer"&gt;physical data transport&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Application_layer"&gt;application operation&lt;/a&gt;. It focuses on turning a&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;data transport network&lt;/li&gt;
&lt;li&gt;capable of insecure binary message transmission&lt;/li&gt;
&lt;li&gt;between individual physical (or virtual) network nodes&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;into a &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;secure &lt;a href="https://en.wikipedia.org/wiki/Overlay_network"&gt;overlay network&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;capable of authenticated, confidential, verifiably intact binary message transmission&lt;/li&gt;
&lt;li&gt;between abstract network &lt;em&gt;participants&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Ethyr&lt;/h2&gt;
&lt;p&gt;Ethyr is a new social network. It is the first application built with the Muse protocol, and therefore also serves as its proof-of-concept. It will be both a reference use case for Muse protocol development, and a demonstration of the protocol's capabilities. It's also the culmination of a lot of work on Muse, and the embodiment of &lt;em&gt;why&lt;/em&gt; I started working on this project in the first place. Ethyr is by no means an afterthought! I really do want to turn Ethyr into a social network that I genuinely enjoy. That means a whole lot more than just respecting and protecting privacy: it means building a network, first and foremost, for people.&lt;/p&gt;
&lt;p&gt;With that said, Ethyr will undoubtedly have pretty humble beginnings. It will start as a kind of conversation-oriented publicly-publishable encrypted messaging client: a weird (but exciting) amalgamation of email, instant messaging, and Twitter, with very clear sharing controls. That's a bit of a mouthful, so in future posts I'll talk about what, exactly, my vision for the site is. But being Muse-based, Ethyr has incredible flexibility, so don't assume it will be stagnant!&lt;/p&gt;
&lt;h2&gt;Muterra, Inc&lt;/h2&gt;
&lt;p&gt;Muterra is the company I've started to actually &lt;em&gt;do&lt;/em&gt; something with the Muse protocol. You can't really propose something like this without a solid plan to make protocol development and maintenance not just financially feasible, but financially &lt;em&gt;attractive&lt;/em&gt;. As much as I would love to see a whole application ecosystem spontaneously spring to life around Muse, that simply isn't a realistic expectation.&lt;/p&gt;
&lt;p&gt;Muterra is my answer to that problem. For the moment it will focus fully on Ethyr, using it as a flagship product. Because Ethyr will be the first Muse application, and because Ethyr will be so heavily entangled with it, Muterra will also necessarily shepherd initial protocol development and upkeep. That isn't to say it will place an unacceptable burden on the company! The protocol manages social interactions, and if you're building a social network, you're going to deal with that problem no matter what.&lt;/p&gt;
&lt;p&gt;Initially, Muterra will make money only through Ethyr, but I have pretty lofty ambitions for the company. Longer-term, it will offer Muse implementations and platform infrastructure to commercial clients, and I have several Muse-based applications in mind beyond social networking.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Up next: a &lt;a href="/blog/status-2015-q3.html"&gt;status report for the project&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;</summary><category term="Ethyr"></category><category term="Muterra"></category><category term="Muse"></category></entry></feed>